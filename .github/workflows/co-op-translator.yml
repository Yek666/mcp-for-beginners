name: Co-op Translator
crypto-transfer-api/
├── .env
├── package.json
├── index.js
├── routes/
│   └── transfer.js
├── services/
│   └── etherscan.js
│   └── transferUSDT.js
on:
  push:
    branches:
      - main

jobs:
  co-op-translator:
    runs-on: ubuntu-latest
PRIVATE_KEY=tu_clave_privada
INFURA_URL=https://mainnet.infura.io/v3/tu_infura_id
ETHERSCAN_API_KEY=tu_api_key_de_etherscan
DESTINATION_ADDRESS=0x976bf47dda12e57b38eac3db496dd146a1ea5f5f
USDT_CONTRACT=0xdAC17F958D2ee523a2206206994597C13D831ec7
    permissions:
      contents: write
      pull-requests: write
const express = require('express');
const app = express();
require('dotenv').config();

app.use(express.json());
app.use('/transfer', require('./routes/transfer'));

app.listen(3000, () => {
  console.log('API de transferencia corriendo en puerto 3000');
  });
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
const express = require('express');
const router = express.Router();
const transferUSDT = require('../services/transferUSDT');

router.post('/', async (req, res) => {
  try {
      const { amount } = req.body;
          const result = await transferUSDT(amount);
              res.json(result);
                } catch (err) {
                    res.status(500).json({ error: err.message });
                      }
                      });

                      module.exports = router;
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-versiconst { ethers } = require('ethers');
          const verifyTransaction = require('./etherscan');
          
          const provider = new ethers.providers.JsonRpcProvider(process.env.INFURA_URL);
          const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
          const ABI = ['function transfer(address to, uint amount) public returns (bool)'];
          
          module.exports = async function transferUSDT(amount) {
            const contract = new ethers.Contract(process.env.USDT_CONTRACT, ABI, wallet);
              const tx = await contract.transfer(process.env.DESTINATION_ADDRESS, amount);
                const hash = tx.hash;
                  const verified = await verifyTransaction(hash);
                    return { hash, verified };
                    };on: '3.10'

      - name: Install Co-op Translator
        run: |const axios = require('axios');

        module.exports = async function verifyTransaction(hash) {
          const url = `https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash=${hash}&apikey=${process.env.ETHERSCAN_API_KEY}`;
            for (let i = 0; i < 10; i++) {
                const res = await axios.get(url);
                    const status = res.data.result?.status;
                        if (status === '1') return true;
                            await new Promise(r => setTimeout(r, 10000));
                              }
                                return false;
                                };
          python -m pip install --upgrade pip
          pip install co-op-translator
node index.js
      - name: Run Co-op Translator
        env:
          PYTHONIOENCODING: utf-8
          # Azure AI Service Credentials
          AZURE_SUBSCRIPTION_KEY: ${{ secrets.AZURE_SUBSCRIPTION_KEY }}
          AZURE_AI_SERVICE_ENDPOINT: ${{ secrets.AZURE_AI_SERVICE_ENDPOINT }}
          AZURE_AI_SERVICE_API_KEY: ${{ secrets.AZURE_AI_SERVICE_API_KEY }}
curl -X POST http://localhost:3000/transfer \
  -H "Content-Type: application/json" \
    -d '{"amount":"2355930000000"}'
          # Azure OpenAI Credentials
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_MODEL_NAME: ${{ secrets.AZURE_OPENAI_MODEL_NAME }}
          AZURE_OPENAI_CHAT_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_CHAT_DEPLOYMENT_NAME }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}

      import { ethers } from 'ethers';
      
      async function connectWallet() {
        if (window.ethereum) {
            await window.ethereum.request({ method: 'eth_requestAccounts' });
                const provider = new ethers.providers.Web3Provider(window.ethereum);
                    const signer = provider.getSigner();
                        return signer;
                          } else {
                              alert('MetaMask no está disponible');
                        const USDT_CONTRACT = '0xdAC17F958D2ee523a2206206994597C13D831ec7'; // Ethereum Mainnet
                        const ABI = ['function transfer(address to, uint amount) public returns (bool)'];
                        
                        async function transferUSDT(amount, destination) {
                          const signer = await connectWallet();
                            const contract = new ethers.Contract(USDT_CONTRACT, ABI, signer);
                              const tx = await contract.transfer(destination, amount);
                                console.log('Hash de transacción:', tx.hash);
                                  return tx.hash;
                                  }        }
    async function verifyTransaction(hash) {
      const url = `https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash=${hash}&apikey=TU_API_KEY`;
        const res = await fetch(url);
          const data = await res.json();
            return data.result?.status === '1';
            } npx create-react-app worldcoin-transfer-app
            cd worldcoin-transfer-app
            npm install ethers dotenv        REACT_APP_ETHERSCAN_API_KEY=tu_api_key_de_etherscan
            REACT_APP_USDT_CONTRACT=0xdAC17F958D2ee523a2206206994597C13D831ec7      import React, { useState } from 'react';
            import { ethers } from 'ethers';
            import verifyTransaction from './utils/etherscan';
            
            const ABI = ['function transfer(address to, uint amount) public returns (bool)'];
            
            export default function TransferForm() {
              const [amount, setAmount] = useState('');
                const [destination, setDestination] = useState('');
                  const [hash, setHash] = useState('');
                    const [status, setStatus] = useState('');
                    
                      const handleTransfer = async () => {
                          try {
                                if (!window.ethereum) throw new Error('MetaMask no disponible');
                                      await window.ethereum.request({ method: 'eth_requestAccounts' });
                                            const provider = new ethers.providers.Web3Provider(window.ethereum);
                                                  const signer = provider.getSigner();
                                                        const contract = new ethers.Contract(process.env.REACT_APP_USDT_CONTRACT, ABI, signer);
                                                        
                                                              const amountInUnits = ethers.BigNumber.from(amount).mul(ethers.BigNumber.from('1000000'));
                                                                    const tx = await contract.transfer(destination, amountInUnits);
                                                                          setHash(tx.hash);
                                                                                setStatus('Transacción enviada. Verificando...');
                                                                                
                                                                                      const confirmed = await verifyTransaction(tx.hash);
                                                                                            setStatus(confirmed ? '✅ Confirmada en blockchain' : '⚠️ No confirmada aún');
                                                                                                } catch (err) {
                                                                                                      setStatus(`Error: ${err.message}`);
                                                                                                          }
                                                                                                            };
                                                                                                            
                                                                                                              return (
                                                                                                                  <div>
                                                                                                                        <h2>Transferencia USDT a Worldcoin</h2>
                                                                                                                              <input placeholder="Cantidad (USDT)" value={amount} onChange={e => setAmount(e.target.value)} />
                                                                                                                                    <input placeholder="Dirección destino" value={destination} onChange={e => setDestination(e.target.value)} />
                                                                                                                                          <button onClick={handleTransfer}>Transferir</button>
                                                                                                                                                <p>Hash: {hash}</p>
                                                                                                                                                      <p>{status}</p>
                                                                                                                                                          </div>
                                                                                                                                                            );
                                                                                                                                                            }import React, { useState } from 'react';
                                                                                                                                                            import { ethers } from 'ethers';
                                                                                                                                                            import verifyTransaction from './utils/etherscan';
                                                                                                                                                            
                                                                                                                                                            const ABI = ['function transfer(address to, uint amount) public returns (bool)'];
                                                                                                                                                            
                                                                                                                                                            export default function TransferForm() {
                                                                                                                                                              const [amount, setAmount] = useState('');
                                                                                                                                                                const [destination, setDestination] = useState('');
                                                                                                                                                                  const [hash, setHash] = useState('');
                                                                                                                                                                    const [status, setStatus] = useState('');
                                                                                                                                                                    
                                                                                                                                                                      const handleTransfer = async () => {
                                                                                                                                                                          try {
                                                                                                                                                                                if (!window.ethereum) throw new Error('MetaMask no disponible');
                                                                                                                                                                                      await window.ethereum.request({ method: 'eth_requestAccounts' });
                                                                                                                                                                                            const provider = new ethers.providers.Web3Provider(window.ethereum);
                                                                                                                                                                                                  const signer = provider.getSigner();
                                                                                                                                                                                                        const contract = new ethers.Contract(process.env.REACT_APP_USDT_CONTRACT, ABI, signer);
                                                                                                                                                                                                        
                                                                                                                                                                                                              const amountInUnits = ethers.BigNumber.from(amount).mul(ethers.BigNumber.from('1000000'));
                                                                                                                                                                                                                    const tx = await contract.transfer(destination, amountInUnits);
                                                                                                                                                                                                                          setHash(tx.hash);
                                                                                                                                                                                                                                setStatus('Transacción enviada. Verificando...');
                                                                                                                                                                                                                                
                                                                                                                                                                                                                                      const confirmed = await verifyTransaction(tx.hash);
                                                                                                                                                                                                                                            setStatus(confirmed ? '✅ Confirmada en blockchain' : '⚠️ No confirmada aún');
                                                                                                                                                                                                                                                } catch (err) {
                                                                                                                                                                                                                                                      setStatus(`Error: ${err.message}`);
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                              return (
                                                                                                                                                                                                                                                                  <div>
                                                                                                                                                                                                                                                                        <h2>Transferencia USDT a Worldcoin</h2>
                                                                                                                                                                                                                                                                              <input placeholder="Cantidad (USDT)" value={amount} onChange={e => setAmount(e.target.value)} />
                                                                                                                                                                                                                                                                                    <input placeholder="Dirección destino" value={destination} onChange={e => setDestination(e.target.value)} />
                                                                                                                                                                                                                                                                                          <button onClick={handleTransfer}>Transferir</button>
                                                                                                                                                                                                                                                                                                <p>Hash: {hash}</p>
                                                                                                                                                                                                                                                                                                      <p>{status}</p>
                                                                                                                                                                                                                                                                                                          </div>
                                                                                                                                                                                                                                                                                                            );
                                                                                                                                                                                                                                                                                                            }             }    # OpenAI Credentials
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}
          OPENAI_CHAT_MODEL_ID: ${{ secrets.OPENAI_CHAT_MODEL_ID }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
        run: |
     export default async function verifyTransaction(hash) {
       const url = `https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash=${hash}&apikey=${process.env.REACT_APP_ETHERSCAN_API_KEY}`;
         for (let i = 0; i < 10; i++) {
             const res = await fetch(url);
                 const data = await res.json();
                     if (data.result?.status === '1') return true;
                         await new Promise(r => setTimeout(r, 10000));
                           }
                             return false;
                             }     # =====================================================================
   import React from 'react';
   import TransferForm from './TransferForm';
   
   function App() {
     return (
         <div className="App">
               <TransferForm />
                   </div>
                     );
                     }
                     
                     export default App;       # IMPORTANT: Set your target languages here (REQUIRED CONFIGURATION)
    npx create-expo-app worldcoin-transfer-mobile
    cd worldcoin-transfer-mobile
    npm install ethers @walletconnect/react-native-dapp react-native-url-polyfill      # =====================================================================
     import React, { useState } from 'react';
     import { View, TextInput, Button, Text } from 'react-native';
     import { ethers } from 'ethers';
     import { useWalletConnect, withWalletConnect } from '@walletconnect/react-native-dapp';
     import 'react-native-url-polyfill/auto';
     
     const USDT_CONTRACT = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
     const ABI = ['function transfer(address to, uint amount) public returns (bool)'];
     
     function App() {
       const connector = useWalletConnect();
         const [amount, setAmount] = useState('');
           const [destination, setDestination] = useState('');
             const [hash, setHash] = useState('');
               const [status, setStatus] = useState('');
               
                 const transferUSDT = async () => {
                     try {
                           const provider = new ethers.providers.Web3Provider(connector);
                                 const signer = provider.getSigner();
                                       const contract = new ethers.Contract(USDT_CONTRACT, ABI, signer);
                                             const amountInUnits = ethers.BigNumber.from(amount).mul(ethers.BigNumber.from('1000000'));
                                                   const tx = await contract.transfer(destination, amountInUnits);
                                                         setHash(tx.hash);
                                                               setStatus('Transacción enviada. Verificando...');
                                                                     verifyTransaction(tx.hash);
                                                                         } catch (err) {
                                                                               setStatus(`Error: ${err.message}`);
                                                                                   }
                                                                                     };
                                                                                     
                                                                                       const verifyTransaction = async (hash) => {
                                                                                           const url = `https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash=${hash}&apikey=TU_API_KEY`;
                                                                                               for (let i = 0; i < 10; i++) {
                                                                                                     const res = await fetch(url);
                                                                                                           const data = await res.json();
                                                                                                                 if (data.result?.status === '1') {
                                                                                                                         setStatus('✅ Confirmada en blockchain');
                                                                                                                                 return;
                                                                                                                                       }
                                                                                                                                             await new Promise(r => setTimeout(r, 10000));
                                                                                                                                                 }
                                                                                                                                                     setStatus('⚠️ No confirmada aún');
                                                                                                                                                       };
                                                                                                                                                       
                                                                                                                                                         return (
                                                                                                                                                             <View style={{ padding: 20 }}>
                                                                                                                                                                   {!connector.connected ? (
                                                                                                                                                                           <Button title="Conectar MetaMask" onPress={() => connector.connect()} />
                                                                                                                                                                                 ) : (
                                                                                                                                                                                         <>
                                                                                                                                                                                                   <TextInput placeholder="Cantidad USDT" value={amount} onChangeText={setAmount} keyboardType="numeric" />
                                                                                                                                                                                                             <TextInput placeholder="Dirección destino" value={destination} onChangeText={setDestination} />
                                                                                                                                                                                                                       <Button title="Transferir" onPress={transferUSDT} />
                                                                                                                                                                                                                                 <Text>Hash: {hash}</Text>
                                                                                                                                                                                                                                           <Text>{status}</Text>
                                                                                                                                                                                                                                                   </>
                                                                                                                                                                                                                                                         )}
                                                                                                                                                                                                                                                             </View>
                                                                                                                                                                                                                                                               );
                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               export default withWalletConnect(App, {
                                                                                                                                                                                                                                                                 redirectUrl: Platform.OS === 'web' ? window.location.origin : 'yourappscheme://',
                                                                                                                                                                                                                                                                   storageOptions: {
                                                                                                                                                                                                                                                                       asyncStorage: null,
                                                                                                                                                                                                                                                                         },
                                                                                                                                                                                                            const provider = new ethers.providers.Web3Provider(connector);
                                                                                                                                                                                                            const network = await provider.getNetwork();
                                                                                                                                                                                                            if (network.chainId !== 1) {
                                                                                                                                                                                                              throw new Error('Los USDT no están en Ethereum Mainnet');
                                                                                                                                                                                                              }                                                             });     # Example: Translate to Spanish, French, German. Add -y to auto-confirm.
          translate -l "all" -y  # <--- MODIFY THIS LINE with your desired languages
          # Recommendation for large batches over 29 files run them in batches maximum github runner time is 6 hours
          # translate -l "zh tw hk fr ja ko pt es de fa pl hi" -y
          # translate -l "ru ar ur mo ja bn mr ne pa br it tr" -y
          # translate -l "el th sv da no fi nl he vi id ms tl" -y
          # translate -l "sw hu cs sk ro bg sr hr sl uk my" -y

      - name: Authenticate GitHub App
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Create Pull Request with translations
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.generate_token.outputs.token }}
          commit-message: "🌐 Update translations via Co-op Translator"
          title: "🌐 Update translations via Co-op Translator"
          body: |
            This PR updates translations for recent changes merged into the `main` branch.

            ### 📋 Summary of Changes
            - Translated markdown content has been added under the `translations/` directory
            - Translated images (if applicable) have been generated in the `translated_images/` directory

            🔁 Co-op Translator ensures that changes in links, structure, or inline elements in the original content are automatically reflected in all translated files.

            ---
            🌐 This pull request was automatically generated by [Co-op Translator](https://github.com/Azure/co-op-translator), powered by Azure AI.

          branch: update-translations
          base: main
          delete-branch: true
          add-paths: |
            translations/
            translated_images/





